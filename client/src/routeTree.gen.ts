/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MapImport } from './routes/map'
import { Route as ImportImport } from './routes/import'
import { Route as ContractsImport } from './routes/contracts'
import { Route as BookingImport } from './routes/booking'
import { Route as BookingsContractuuidImport } from './routes/bookings.$contract_uuid'
import { Route as SiteEditSiteuuidImport } from './routes/site.edit.$site_uuid'
import { Route as BookingsCreateContractuuidImport } from './routes/bookings.create.$contract_uuid'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const ImportRoute = ImportImport.update({
  id: '/import',
  path: '/import',
  getParentRoute: () => rootRoute,
} as any)

const ContractsRoute = ContractsImport.update({
  id: '/contracts',
  path: '/contracts',
  getParentRoute: () => rootRoute,
} as any)

const BookingRoute = BookingImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const BookingsContractuuidRoute = BookingsContractuuidImport.update({
  id: '/bookings/$contract_uuid',
  path: '/bookings/$contract_uuid',
  getParentRoute: () => rootRoute,
} as any)

const SiteEditSiteuuidRoute = SiteEditSiteuuidImport.update({
  id: '/site/edit/$site_uuid',
  path: '/site/edit/$site_uuid',
  getParentRoute: () => rootRoute,
} as any)

const BookingsCreateContractuuidRoute = BookingsCreateContractuuidImport.update(
  {
    id: '/bookings/create/$contract_uuid',
    path: '/bookings/create/$contract_uuid',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingImport
      parentRoute: typeof rootRoute
    }
    '/contracts': {
      id: '/contracts'
      path: '/contracts'
      fullPath: '/contracts'
      preLoaderRoute: typeof ContractsImport
      parentRoute: typeof rootRoute
    }
    '/import': {
      id: '/import'
      path: '/import'
      fullPath: '/import'
      preLoaderRoute: typeof ImportImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/bookings/$contract_uuid': {
      id: '/bookings/$contract_uuid'
      path: '/bookings/$contract_uuid'
      fullPath: '/bookings/$contract_uuid'
      preLoaderRoute: typeof BookingsContractuuidImport
      parentRoute: typeof rootRoute
    }
    '/bookings/create/$contract_uuid': {
      id: '/bookings/create/$contract_uuid'
      path: '/bookings/create/$contract_uuid'
      fullPath: '/bookings/create/$contract_uuid'
      preLoaderRoute: typeof BookingsCreateContractuuidImport
      parentRoute: typeof rootRoute
    }
    '/site/edit/$site_uuid': {
      id: '/site/edit/$site_uuid'
      path: '/site/edit/$site_uuid'
      fullPath: '/site/edit/$site_uuid'
      preLoaderRoute: typeof SiteEditSiteuuidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/booking': typeof BookingRoute
  '/contracts': typeof ContractsRoute
  '/import': typeof ImportRoute
  '/map': typeof MapRoute
  '/bookings/$contract_uuid': typeof BookingsContractuuidRoute
  '/bookings/create/$contract_uuid': typeof BookingsCreateContractuuidRoute
  '/site/edit/$site_uuid': typeof SiteEditSiteuuidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/booking': typeof BookingRoute
  '/contracts': typeof ContractsRoute
  '/import': typeof ImportRoute
  '/map': typeof MapRoute
  '/bookings/$contract_uuid': typeof BookingsContractuuidRoute
  '/bookings/create/$contract_uuid': typeof BookingsCreateContractuuidRoute
  '/site/edit/$site_uuid': typeof SiteEditSiteuuidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/booking': typeof BookingRoute
  '/contracts': typeof ContractsRoute
  '/import': typeof ImportRoute
  '/map': typeof MapRoute
  '/bookings/$contract_uuid': typeof BookingsContractuuidRoute
  '/bookings/create/$contract_uuid': typeof BookingsCreateContractuuidRoute
  '/site/edit/$site_uuid': typeof SiteEditSiteuuidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/booking'
    | '/contracts'
    | '/import'
    | '/map'
    | '/bookings/$contract_uuid'
    | '/bookings/create/$contract_uuid'
    | '/site/edit/$site_uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/booking'
    | '/contracts'
    | '/import'
    | '/map'
    | '/bookings/$contract_uuid'
    | '/bookings/create/$contract_uuid'
    | '/site/edit/$site_uuid'
  id:
    | '__root__'
    | '/'
    | '/booking'
    | '/contracts'
    | '/import'
    | '/map'
    | '/bookings/$contract_uuid'
    | '/bookings/create/$contract_uuid'
    | '/site/edit/$site_uuid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BookingRoute: typeof BookingRoute
  ContractsRoute: typeof ContractsRoute
  ImportRoute: typeof ImportRoute
  MapRoute: typeof MapRoute
  BookingsContractuuidRoute: typeof BookingsContractuuidRoute
  BookingsCreateContractuuidRoute: typeof BookingsCreateContractuuidRoute
  SiteEditSiteuuidRoute: typeof SiteEditSiteuuidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BookingRoute: BookingRoute,
  ContractsRoute: ContractsRoute,
  ImportRoute: ImportRoute,
  MapRoute: MapRoute,
  BookingsContractuuidRoute: BookingsContractuuidRoute,
  BookingsCreateContractuuidRoute: BookingsCreateContractuuidRoute,
  SiteEditSiteuuidRoute: SiteEditSiteuuidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/booking",
        "/contracts",
        "/import",
        "/map",
        "/bookings/$contract_uuid",
        "/bookings/create/$contract_uuid",
        "/site/edit/$site_uuid"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/booking": {
      "filePath": "booking.tsx"
    },
    "/contracts": {
      "filePath": "contracts.tsx"
    },
    "/import": {
      "filePath": "import.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/bookings/$contract_uuid": {
      "filePath": "bookings.$contract_uuid.tsx"
    },
    "/bookings/create/$contract_uuid": {
      "filePath": "bookings.create.$contract_uuid.tsx"
    },
    "/site/edit/$site_uuid": {
      "filePath": "site.edit.$site_uuid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
